version: "3"

vars:
  git_root:
    sh: git rev-parse --show-toplevel
  go_root:
    sh: go env GOPATH
  go_version:
    sh: grep '^go ' ./go.mod | awk '{print $2}'
  
  go_imports: latest
  go_fumpt: latest
  go_lint: v2.1.2

  base_name: godyno
  bin_dir: "{{.git_root}}/bin/"

tasks:
  default:
    desc: Default task.
    cmds:
      - echo "Please enter a task or use '-l' or '--list-all' to list all available tasks"
    silent: true

  # =================================================
  # ---------------------INTERNAL-------------------#
  # =================================================

  _go/version/check:
    desc: Check actual golang version.
    dir: "{{.git_root}}"
    cmds:
      - |
        required_version="{{.go_version}}"
        current_version=$(go version | awk '{print $3}' | sed 's/go//')
        
        version_compare() {
          if [ "$(echo -e "$1\n$2" | sort -V | head -n1)" = "$1" ]; then
            return 0
          else
            return 1
          fi
        }
        if ! version_compare "$required_version" "$current_version"; then
          echo "Error: Go version $required_version or higher is required, but you have $current_version"
          exit 1
        fi
    silent: true
    internal: true

  _go/install/lint:
    desc: Install 'golangci-lint'.
    deps:
      - _go/version/check
    cmds:
      - cmd: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b {{.go_root}}/bin {{.golint_version}}
      - "{{.go_root}}/bin/golangci-lint version"
    sources:
      - "{{.go_root}}/bin/golangci-lint"
    internal: true
    silent: true

  _go/install/fumpt:
    desc: Install 'gofumpt'.
    deps:
      - _go/version/check
    cmd: go install mvdan.cc/gofumpt@{{.go_fumpt}}
    sources: 
     - "{{.go_root}}/bin/gofumpt"
    internal: true
    silent: true

  _go/dyno/build:
    desc: Internal build task template.
    dir: "{{.git_root}}"
    deps:
      - _go/version/check
      - go/mod/vendor
    vars:
      BINARY_NAME: "{{.base_name}}"
      OUTPUT_DIR: "{{.bin_dir}}"
      BUILD_VERSION: 
        sh: echo "${VERSION:-dev}"
      LDFLAGS: "-s -w -extldflags '-static' -X 'github.com/Mad-Pixels/go-dyno.Version={{.BUILD_VERSION}}'"
      GCFLAGS: "-trimpath -N -l"
      ASMFLAGS: "-trimpath"
    cmds: 
      - mkdir -p {{.OUTPUT_DIR}}
      - |
        GOOS={{.GOOS}} GOARCH={{.GOARCH}} CGO_ENABLED=0 go build \
          -mod=vendor \
          -ldflags="{{.LDFLAGS}}" \
          -gcflags="{{.GCFLAGS}}" \
          -asmflags="{{.ASMFLAGS}}" \
          -o {{.OUTPUT_DIR}}/{{.BINARY_NAME}}_{{.GOOS}}_{{.GOARCH}}{{if eq .GOOS "windows"}}.exe{{end}} \
          ./cmd/dyno
    silent: true
    internal: true

  # =================================================
  # ----------------------PUBLIC--------------------#
  # =================================================

  go/mod/vendor:
    desc: Run 'go mod vendor'.
    dir: "{{.git_root}}"
    deps:
      - _go/version/check
    cmds:
      - |
        if [ -d "{{.git_root}}/vendor" ]; then
          cd {{.git_root}} && go mod tidy
        else 
          cd {{.git_root}} && go mod tidy && go mod vendor
        fi
    silent: true

  go/run/fumpt:
    desc: Run 'gofumpt'.
    dir: "{{.git_root}}"
    deps:
      - _go/install/fumpt
    cmd: gofumpt -l -w .
    silent: true

  go/run/lint:
    desc: Run 'golangci-lint'.
    dir: "{{.git_root}}"
    deps:
      - _go/install/lint
      - go/mod/vendor 
    cmds: 
      - "{{.go_root}}/bin/golangci-lint run"
    silent: true

  go/tests/app:
    desc: Tests app with basic cli checks 
    dir: "{{ .git_root }}/internal" 
    deps:
      - go/mod/vendor 
    cmd: go test -parallel 4 -shuffle=on -v ./... 
    silent: true

  go/tests/template:
    desc: Tests template parts statc
    dir: "{{ .git_root }}/templates/v2/tests/parts" 
    deps:
      - go/mod/vendor 
    cmd: go test -parallel 4 -shuffle=on -v ./... 
    silent: true

  go/tests/compile:
    desc: Tests full template fromtatter, build, vet
    dir: "{{ .git_root }}/templates/v2/tests/validation" 
    deps:
      - go/mod/vendor 
      - _go/install/fumpt
    cmd: go test -parallel 4 -shuffle=on -v ./... 
    silent: true

  go/tests/localstack:
    desc: Func test generated template with localstack environment
    dir: "{{ .git_root }}/templates/v2/tests/localstack"
    deps:
      - go/mod/vendor
    cmds:
      - |
        echo "Hello"
  
  go/tests/all:
    desc: Run all tests
    dir: "{{ .git_root }}"
    deps:
      - go/mod/vendor
      - _go/install/fumpt
    cmds:
      - |
        go test -parallel 4 -shuffle=on -v ./...

  # =================================================
  # ----------------------BUILD---------------------#
  # =================================================

  go/build/darwin_amd64:
    desc: Build for macOS Intel (darwin/amd64)
    cmds:
      - task: _go/dyno/build
        vars:
          GOOS: darwin 
          GOARCH: amd64 

  go/build/darwin_arm64:
    desc: Build for macOS Apple Silicon (darwin/arm64)
    cmds: 
      - task: _go/dyno/build
        vars: 
          GOOS: darwin 
          GOARCH: arm64 
  
  go/build/linux_amd64:
    desc: Build for Linux x86_64 (linux/amd64)
    cmds: 
      - task: _go/dyno/build
        vars:
          GOOS: linux
          GOARCH: amd64

  go/build/linux_386:
    desc: Build for linux 32-bit (linux/386)
    cmds:
      - task: _go/dyno/build
        vars: 
          GOOS: linux
          GOARCH: "386"

  go/build/linux_arm:
    desc: Build for Linux ARM 32-bit (linux/arm)
    cmds:
      - task: _go/dyno/build
        vars: 
          GOOS: linux
          GOARCH: arm
          GOARM: "7"

  go/build/linux_arm64:
    desc: Build for Linux ARM 6640bit (linux/arm64)
    cmds: 
      - task: _go/dyno/build
        vars:
          GOOS: linux
          GOARCH: arm64
  
  go/build/windows_amd64:
    desc: Build for Windows 64-bit (windows/amd64).
    cmds:
      - task: _go/dyno/build
        vars:
          GOOS: windows
          GOARCH: amd64

  go/build/windows_386:
    desc: Build for Windows 32-bit (windows/386).
    cmds:
      - task: _go/dyno/build
        vars:
          GOOS: windows
          GOARCH: "386"

  go/build/freebsd_amd64:
    desc: Build for FreeBSD 64-bit (freebsd/amd64).
    cmds:
      - task: _go/dyno/build
        vars:
          GOOS: freebsd
          GOARCH: amd64

  go/build/openbsd_amd64:
    desc: Build for OpenBSD 64-bit (openbsd/amd64).
    cmds:
      - task: _go/dyno/build
        vars:
          GOOS: openbsd
          GOARCH: amd64

  go/build/all:
    desc: Build for all supported platforms.
    cmds:
      - task: go/build/darwin_amd64
      - task: go/build/darwin_arm64
      - task: go/build/linux_amd64
      - task: go/build/linux_386
      - task: go/build/linux_arm
      - task: go/build/linux_arm64
      - task: go/build/windows_amd64
      - task: go/build/windows_386
      - task: go/build/freebsd_amd64
      - task: go/build/openbsd_amd64

  go/build/clean:
    desc: Clean build artifacts.
    dir: "{{.git_root}}"
    cmds:
      - rm -rf build/
    silent: true