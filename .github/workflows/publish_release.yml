name: Publish Release 

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: release-tag-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  check-main-branch:
    name: Verify tag from main branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if tag is from main branch
        run: |
          TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref_name }})
          if ! git merge-base --is-ancestor $TAG_COMMIT origin/main; then
            exit 1
          fi

  build-binaries:
    name: (Release) Build Binaries
    needs: check-main-branch
    uses: ./.github/workflows/.build-binaries.yml
    with:
      platforms: '["darwin_amd64", "darwin_arm64", "linux_amd64", "linux_arm64"]'
      upload_artifacts: true 
      version: ${{ github.ref_name }}

  build-images:
    name: (Release) Build Docker Images
    needs: check-main-branch
    uses: ./.github/workflows/.build-images.yml
    with:
      version: ${{ github.ref_name }}
    secrets:
      docker_user: ${{ secrets.DOCKERHUB_USERNAME }}
      docker_token: ${{ secrets.DOCKERHUB_PASSWORD }}

  generate-changelog:
    name: (Release) Generate Changelog
    needs: check-main-branch
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
    
      - name: Generate Changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^${{ github.ref_name }}$" | head -n1)
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi 

          CHANGELOG=""
          FEATURES=$(git log --pretty=format:"- %s" --grep="^\[feature\]" --grep="^\[feat\]" $PREVIOUS_TAG..${{ github.ref_name }} | head -20)
          if [ -n "$FEATURES" ]; then
            CHANGELOG="$CHANGELOG### ‚ú® New Features\n$FEATURES\n\n"
          fi 
          FIXES=$(git log --pretty=format:"- %s" --grep="^\[fix\]" --grep="^\[bugfix\]" --grep="^\[hotfix\]" $PREVIOUS_TAG..${{ github.ref_name }} | head -20)
          if [ -n "$FIXES" ]; then
            CHANGELOG="$CHANGELOG### üêõ Bug Fixes\n$FIXES\n\n"
          fi 
          IMPROVEMENTS=$(git log --pretty=format:"- %s" --grep="^\[improve\]" --grep="^\[perf\]" --grep="^\[refactor\]" --grep="^\[optimize\]" $PREVIOUS_TAG..${{ github.ref_name }} | head -10)
          if [ -n "$IMPROVEMENTS" ]; then
            CHANGELOG="$CHANGELOG### üöÄ Improvements\n$IMPROVEMENTS\n\n"
          fi
          DOCS=$(git log --pretty=format:"- %s" --grep="^\[docs\]" --grep="^\[doc\]" $PREVIOUS_TAG..${{ github.ref_name }} | head -10)
          if [ -n "$DOCS" ]; then
            CHANGELOG="$CHANGELOG### üìö Documentation\n$DOCS\n\n"
          fi
          OTHER=$(git log --pretty=format:"- %s" --invert-grep --grep="^\[feature\]" --grep="^\[feat\]" --grep="^\[fix\]" --grep="^\[bugfix\]" --grep="^\[hotfix\]" --grep="^\[improve\]" --grep="^\[perf\]" --grep="^\[refactor\]" --grep="^\[optimize\]" --grep="^\[docs\]" --grep="^\[doc\]" $PREVIOUS_TAG..${{ github.ref_name }} | head -10)
          if [ -n "$OTHER" ]; then
            CHANGELOG="$CHANGELOG### üìù Other Changes\n$OTHER\n\n"
          fi
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="### üìã Changes\n- Release ${{ github.ref_name }}\n\n"
          fi

          COMMIT_COUNT=$(git rev-list --count $PREVIOUS_TAG..${{ github.ref_name }})
          CHANGELOG="$CHANGELOG### üìä Stats\n- **$COMMIT_COUNT** commits since $PREVIOUS_TAG\n"
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  publish-release:
    name: Publish Release
    needs: [build-binaries, build-images, generate-changelog]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "GoDyno ${{ github.ref_name }}"
          body: |
            # üéØ DynamoDB Code Generator

            **GoDyno** is a powerful CLI tool that generates strongly-typed Go code for AWS DynamoDB operations. Transform your DynamoDB table schemas into production-ready Go structs, query builders, and utilities with zero boilerplate.

            ## üåü Key Features
            - üîß **Schema-driven code generation** from JSON definitions
            - üèóÔ∏è **Type-safe query builders** with fluent API
            - üéØ **Multi-index support** with automatic optimization
            - üîç **Composite key handling** for complex queries
            - üì¶ **Zero dependencies** in generated code _(except aws-sdk-v2)_
            - üöÄ **AWS SDK v2 compatibility**
            - ‚ö° **Terraform integration** - single JSON schema for both infrastructure and code!

            ## üî• Terraform Integration

            **The game-changer:** Use the **same JSON schema** for both Terraform infrastructure provisioning and Go code generation!

            ```hcl
            # terraform/main.tf
            module "dynamodb_table" {
              source = "terraform-aws-modules/dynamodb-table/aws"
              
              # Use the same schema.json for infrastructure
              table_schema = file("./schema/dictionary.json")
            }
            ```

            ```bash
            # Generate Go code from the same schema
            godyno gen --cfg ./schema/dictionary.json --dest ./generated
            ```

            **Benefits:**
            - üìã **Single source of truth** for table structure
            - üîÑ **Perfect sync** between infrastructure and code
            - üõ°Ô∏è **No schema drift** between Terraform and application
            - üöÄ **Faster development** with consistent definitions

            ---
            
            ## üê≥ Quick Start with Docker
            ```bash
            # Pull the image
            docker pull madpixels/go-dyno:${{ github.ref_name }}
            
            # Generate code from schema
            docker run --rm -v $(pwd):/workspace madpixels/go-dyno:${{ github.ref_name }} \
              gen --cfg /workspace/schema.json --dest /workspace/generated
            ```

            ## üì• Installation
            ### Download Binary
            Choose the appropriate binary for your platform from the **Assets** section below.
            ### Using Docker
            ```bash
            docker pull madpixels/go-dyno:${{ github.ref_name }}
            ```
            ### Build from Source
            ```bash
            git clone https://github.com/Mad-Pixels/go-dyno.git
            cd go-dyno
            go build -o godyno ./cmd/main.go
            ```

            ## üî• Example Usage

            ### 1. Define your schema once
            ```bash
            # schema/my-dictionary.json
            {
              "table_name": "my-dictionary",
              "hash_key": "id",
              "range_key": "subcategory",
              "attributes": [
                {"name": "id", "type": "S"},
                {"name": "subcategory", "type": "S"},
                {"name": "created", "type": "N"},
                {"name": "is_public", "type": "N"},
                {"name": "level#is_public", "type": "S"}
              ],
              "common_attributes": [
                {"name": "name", "type": "S"},
                {"name": "author", "type": "S"},
                {"name": "level", "type": "S"},
                {"name": "rating", "type": "N"}
              ],
              "secondary_indexes": [
                {
                  "name": "PublicByDateIndex",
                  "hash_key": "is_public",
                  "range_key": "created",
                  "projection_type": "INCLUDE"
                },
                {
                  "name": "PublicLevelByRatingIndex",
                  "hash_key": "level#is_public",
                  "range_key": "rating",
                  "projection_type": "INCLUDE"
                }
              ]
            }
            ```

            ### 2. Create infrastructure with Terraform
            ```hcl
            module "user_activity_table" {
              source = "your-terraform-module/dynamodb"
              schema = file("./schema/dictionary.json")
            }
            ```

            ### 3. Generate Go code
            ```bash
            godyno gen --cfg ./schema/dictionary.json --dest ./generated
            ```

            ### 4. Use type-safe code
            ```go
            import "your-project/generated/my_dictionary"
            
            query := my_dictionary.NewQueryBuilder().
              WithUserId("user123").
              WithActivityType("login").
              OrderByDesc().
              Limit(10)
            
            items, err := query.Execute(ctx, dynamoClient)
            ```

            **Result:** Infrastructure and code are always in perfect sync! üéØ

            ---

            ${{ needs.generate-changelog.outputs.changelog }}

            ---

            ## üèÜ Platform Support
            | Platform       | Architecture          | Status |
            |----------------|-----------------------|--------|
            | üçé **macOS**   | Intel (x64)           | ‚úÖ     |
            | üçé **macOS**   | Apple Silicon (ARM64) | ‚úÖ     |
            | üêß **Linux**   | x86_64                | ‚úÖ     |
            | üêß **Linux**   | ARM64                 | ‚úÖ     |
            
            ## üìö Documentation
            - [üìñ Getting Started Guide](https://github.com/Mad-Pixels/go-dyno#readme)

            ## ü§ù Community
            - [üêõ Report Issues](https://github.com/Mad-Pixels/go-dyno/issues)
            - [‚≠ê Give us a star!](https://github.com/Mad-Pixels/go-dyno)
          files: |
            ./artifacts/**/*
          draft: false
          prerelease: false