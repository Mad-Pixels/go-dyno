name: Publish Release 

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: release-tag-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  check-main-branch:
    name: Verify tag from main branch
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if tag is from main branch
        run: |
          TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref_name }})
          if ! git merge-base --is-ancestor $TAG_COMMIT origin/main; then
            exit 1
          fi

  build-binaries:
    name: (Release) Build Binaries
    needs: check-main-branch
    uses: ./.github/workflows/.build-binaries.yml
    with:
      platforms: '["darwin_amd64", "darwin_arm64", "linux_amd64", "linux_arm64"]'
      upload_artifacts: true 
      version: ${{ github.ref_name }}

  build-images:
    name: (Release) Build Docker Images
    needs: check-main-branch
    uses: ./.github/workflows/.build-images.yml
    with:
      version: ${{ github.ref_name }}
    secrets:
      docker_user: ${{ secrets.DOCKERHUB_USERNAME }}
      docker_token: ${{ secrets.DOCKERHUB_PASSWORD }}

  generate-changelog:
    name: (Release) Generate Changelog
    needs: check-main-branch
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
    
      - name: Generate Changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git tag --sort=-creatordate | grep -E 'v[0-9]+\.[0-9]+\.[0-9]+$' | grep -v "^${{ github.ref_name }}$" | head -n1
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi 

          CHANGELOG=""

          FEATURES=$(git log --pretty=format:"- %s" --grep="^\[feature\]" --grep="^\[feat\]" $PREVIOUS_TAG..${{ github.ref_name }} | head -20)
          if [ -n "$FEATURES" ]; then
            CHANGELOG="$CHANGELOG### ‚ú® Features\n$FEATURES\n\n"
          fi 

          FIXES=$(git log --pretty=format:"- %s" --grep="^\[fix\]" $PREVIOUS_TAG..${{ github.ref_name }} | head -20)
          if [ -n "$FIXES" ]; then
            CHANGELOG="$CHANGELOG### üêõ Fixes\n$FIXES\n\n"
          fi 

          PERF=$(git log --pretty=format:"- %s" --grep="^\[perf\]" $PREVIOUS_TAG..${{ github.ref_name }} | head -10)
          if [ -n "$PERF" ]; then
            CHANGELOG="$CHANGELOG### ‚ö° Performance\n$PERF\n\n"
          fi

          REFACTORS=$(git log --pretty=format:"- %s" --grep="^\[refactor\]" $PREVIOUS_TAG..${{ github.ref_name }} | head -10)
          if [ -n "$REFACTORS" ]; then
            CHANGELOG="$CHANGELOG### üîß Refactors\n$REFACTORS\n\n"
          fi

          INFRA=$(git log --pretty=format:"- %s" --grep="^\[infra\]" $PREVIOUS_TAG..${{ github.ref_name }} | head -10)
          if [ -n "$INFRA" ]; then
            CHANGELOG="$CHANGELOG### üèó Infrastructure\n$INFRA\n\n"
          fi

          CHORE=$(git log --pretty=format:"- %s" --grep="^\[chore\]" $PREVIOUS_TAG..${{ github.ref_name }} | head -10)
          if [ -n "$CHORE" ]; then
            CHANGELOG="$CHANGELOG### üî© Chores\n$CHORE\n\n"
          fi

          OTHER=$(git log --pretty=format:"- %s" --invert-grep \
            --grep="^\[feature\]" \
            --grep="^\[fix\]" \
            --grep="^\[perf\]" \
            --grep="^\[refactor\]" \
            --grep="^\[infra\]" \
            --grep="^\[chore\]" \
            $PREVIOUS_TAG..${{ github.ref_name }} | head -10)
          if [ -n "$OTHER" ]; then
            CHANGELOG="$CHANGELOG### üìù Other Changes\n$OTHER\n\n"
          fi

          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="### üìã Changes\n- Release ${{ github.ref_name }}\n\n"
          fi
          
          COMMIT_COUNT=$(git rev-list --count $PREVIOUS_TAG..${{ github.ref_name }})
          CHANGELOG="$CHANGELOG### üìä Stats\n- **$COMMIT_COUNT** commits since $PREVIOUS_TAG\n"

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  publish-release:
    name: Publish Release
    needs: [build-binaries, build-images, generate-changelog]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "GoDyno ${{ github.ref_name }}"
          body: |
            # üéØ DynamoDB Code Generator

            **GoDyno** is a powerful CLI tool that generates strongly-typed Go code for AWS DynamoDB operations. Transform your DynamoDB table schemas into production-ready Go structs, query builders, and utilities with zero boilerplate.

            ## üåü Key Features
            - üîß **Schema-driven code generation** from JSON definitions
            - üèóÔ∏è **Type-safe query builders** with fluent API
            - üéØ **Multi-index support** with automatic optimization
            - üîç **Composite key handling** for complex queries
            - üöÄ **AWS SDK v2 compatibility**
            - ‚ö° **Terraform integration** - single JSON schema for both infrastructure and code!
            
            ## üìö Documentation
            - [üìñ Getting Started Guide](https://go-dyno.madpixels.io/)

            ## ü§ù Community
            - [üêõ Report Issues](https://github.com/Mad-Pixels/go-dyno/issues)
            - [‚≠ê Give us a star!](https://github.com/Mad-Pixels/go-dyno)

            ---

            ${{ needs.generate-changelog.outputs.changelog }}
          files: |
            ./artifacts/**/*
          draft: false
          prerelease: false

  update-docs:
    name: Update docs
    needs: [publish-release, generate-changelog]
    runs-on: ubuntu-latest
    steps:
      - name: Trigger
        run: |
          CHANGELOG_B64=$(echo '${{ needs.generate-changelog.outputs.changelog }}' | base64 -w 0)
          
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/Mad-Pixels/go-dyno-docs/actions/workflows/update_docs.yml/dispatches \
            -d "{\"ref\":\"main\", \"inputs\": {\"version\": \"${{ github.ref_name }}\", \"changelog_b64\": \"$CHANGELOG_B64\"}}"
