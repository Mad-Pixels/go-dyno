name: Checks

on:
  workflow_call:
    secrets:
      gitleaks:
        required: true

permissions:
  contents: read

jobs:
  go-cache:
    name: Go Vendor & Cache
    runs-on: ubuntu-latest
    outputs:
      go_version: ${{ steps.norm_go.outputs.go_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect Go version
        id: get_go
        uses: Mad-Pixels/github-workflows/actions/taskfile-runner@v1
        with:
          command: go/get/version

      - name: Normalize Go version
        id: norm_go
        shell: bash
        env:
          RAW: ${{ steps.get_go.outputs.task_output }}
        run: |
          set -euo pipefail
          V="$(printf '%s' "${RAW:-}" | tr -d '\r' | head -n1 | xargs)"
          if [ -z "$V" ]; then
            echo "❌ Empty Go version from task 'go/get/version'"
            exit 1
          fi
          echo "go_version=$V" >> "$GITHUB_OUTPUT"
          echo "Detected Go version: $V"

      - uses: ./.github/actions/go-cache-restore
        with: 
          go-version: ${{ steps.norm_go.outputs.go_version }}

      - name: Prepare host go cache dirs
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$RUNNER_TEMP/go-cache/build" "$RUNNER_TEMP/go-cache/mod"
          chmod -R u+rwX "$RUNNER_TEMP/go-cache"

      - name: go vendor
        uses: Mad-Pixels/github-workflows/actions/taskfile-runner@v1
        with:
          command: go/mod/vendor
          vars: >-
            VOLUMES=${{ runner.temp }}/go-cache/build:/workspace/.cache/go-build,${{ runner.temp }}/go-cache/mod:/workspace/.cache/go-mod

      - if: always()
        uses: ./.github/actions/go-cache-save
        with:
          go-version: ${{ steps.norm_go.outputs.go_version }}

  golint:
    name: GoLint
    runs-on: ubuntu-latest
    needs: [go-cache]
    steps:
      - uses: actions/checkout@v4

      - name: Restore Go cache
        uses: ./.github/actions/go-cache-restore
        with:
          go-version: ${{ needs['go-cache'].outputs.go_version }}

      - name: Run GoLint
        uses: Mad-Pixels/github-workflows/actions/taskfile-runner@v1
        with:
          command: go/run/lint
          vars: >-
            VOLUMES=${{ runner.temp }}/go-cache/build:/workspace/.cache/go-build,${{ runner.temp }}/go-cache/mod:/workspace/.cache/go-mod

  app-tests:
    name: App
    runs-on: ubuntu-latest
    needs: [go-cache]
    steps:
      - uses: actions/checkout@v4

      - name: Restore Go cache
        uses: ./.github/actions/go-cache-restore
        with:
          go-version: ${{ needs['go-cache'].outputs.go_version }}

      - name: Run Go Tests
        uses: Mad-Pixels/github-workflows/actions/taskfile-runner@v1
        with:
          command: go/tests/app
          vars: >-
            VOLUMES=${{ runner.temp }}/go-cache/build:/workspace/.cache/go-build,${{ runner.temp }}/go-cache/mod:/workspace/.cache/go-mod

  compile-tests:
    name: Compile
    runs-on: ubuntu-latest
    needs: [go-cache]
    steps:
      - uses: actions/checkout@v4

      - name: Restore Go cache
        uses: ./.github/actions/go-cache-restore
        with:
          go-version: ${{ needs['go-cache'].outputs.go_version }}

      - name: Run template compile tests
        uses: Mad-Pixels/github-workflows/actions/taskfile-runner@v1
        with:
          command: go/tests/compile
          vars: >-
            VOLUMES=${{ runner.temp }}/go-cache/build:/workspace/.cache/go-build,${{ runner.temp }}/go-cache/mod:/workspace/.cache/go-mod

  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    steps:
      - name: TfFmt
        uses: Mad-Pixels/github-workflows/actions/taskfile-runner@v1
        with:
          command: tf/fmt 

  leaks:
    name: GitLeaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.gitleaks }}